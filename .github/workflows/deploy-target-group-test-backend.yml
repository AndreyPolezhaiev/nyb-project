name: Build & Deploy Backend to Test Environment

on:
  push:
    branches:
      - test

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: temurin # Рекомендуемый дистрибутив
          java-version: 21
          java-package: jdk
          architecture: x64

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.BACKEND_TEST_ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}
          build-args: |
            DATABASE_PATH=${{ vars.DATABASE_PATH }}
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            LIQUIBASE_PATH=${{ vars.LIQUIBASE_PATH }}
            LIQUIBASE_USER=${{ secrets.LIQUIBASE_USER }}
            LIQUIBASE_PASSWORD=${{ secrets.LIQUIBASE_PASSWORD }}
            S3_KEY_ID=${{ secrets.S3_KEY_ID }}
            S3_KEY_SECRET=${{ secrets.S3_KEY_SECRET }}
            S3_REGION_NAME=${{ vars.S3_REGION_NAME }}
            S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}
            SPRING_SECURITY_USER=${{ secrets.SPRING_SECURITY_USER }}
            SPRING_SECURITY_PASSWORD=${{ secrets.SPRING_SECURITY_PASSWORD }}
            MAIL_HOST=${{ vars.MAIL_HOST }}
            MAIL_PORT=${{ vars.MAIL_PORT }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            COGNITO_CLIENT_SECRET=${{ secrets.COGNITO_CLIENT_SECRET }}
            COGNITO_ACCESS_KEY_ID=${{ secrets.COGNITO_ACCESS_KEY_ID }}
            COGNITO_SECRET_ACCESS_KEY=${{ secrets.COGNITO_SECRET_ACCESS_KEY }}
            IMAGE_TAG=${{ vars.IMAGE_TAG }}
            ECR_REPOSITORY=${{ vars.BACKEND_TEST_ECR_REPOSITORY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up check_command_status script
        run: |
          cat <<- 'EOF' > /tmp/check_command_status.sh
          #!/bin/bash
          check_command_status () {
            local command_id=$1
            local instance=$2
            local status="Pending"
            while [[ "$status" == "Pending" || "$status" == "InProgress" ]]; do
              status=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'Status' --output text 2>/dev/null)
              if [ -z "$status" ]; then
                status="Pending"
              fi
              echo "Command $command_id status on instance $instance: $status"
              sleep 5
            done
            output=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'StandardOutputContent' --output text)
            error_output=$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance" --query 'StandardErrorContent' --output text)
            if [[ "$status" != "Success" ]]; then
              echo "Command $command_id failed with status: $status"
              echo "Standard Error:"
              echo "$error_output"
              exit 1
            else
              echo "Command $command_id succeeded with status: $status"
              echo "Standard Output:"
              echo "$output"
            fi
          }
          export -f check_command_status
          EOF

      - name: Get EC2 instances in Target Group
        id: get_instances
        run: |
          instances=$(aws elbv2 describe-target-health --target-group-arn ${{ secrets.TEST_BACKEND_TARGET_GROUP_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text)
          echo "Instances found: $instances"
          echo "instances=$instances" >> $GITHUB_OUTPUT

      - name: Pull the latest Docker image
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          IMAGE_FULL_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.BACKEND_TEST_ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Deploying to instance: $instance"

            # Определяем команду
            command="docker pull ${IMAGE_FULL_NAME}"
            echo "Pull Command: \"$command\""

            # Отправляем команду через SSM
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "'"${command}"'"
              ]}' \
              --region "${AWS_REGION}" \
              --query "Command.CommandId" \
              --output text)
            echo "Pull Command ID: $command_id"

            # Проверяем статус выполнения команды
            check_command_status "$command_id" "$instance"
          done

      - name: Stop running containers
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Deploying to instance: $instance"

            # Определяем команду
            command="cd /home/ec2-user/app && docker-compose down"
            echo "Stop Command: \"$command\""

            # Отправляем команду через SSM
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "'"${command}"'"
              ]}' \
              --region "${AWS_REGION}" \
              --query "Command.CommandId" \
              --output text)
            echo "Stop Command ID: $command_id"

            # Проверяем статус выполнения команды
            check_command_status "$command_id" "$instance"
          done

      - name: Start containers
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Deploying to instance: $instance"

            # Определяем команду
            command="cd /home/ec2-user/app && docker-compose up -d"
            echo "Start Command: \"$command\""

            # Отправляем команду через SSM
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "'"${command}"'"
              ]}' \
              --region "${AWS_REGION}" \
              --query "Command.CommandId" \
              --output text)
            echo "Start Command ID: $command_id"

            # Проверяем статус выполнения команды
            check_command_status "$command_id" "$instance"
          done

      - name: Remove unused Docker images
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          source /tmp/check_command_status.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances
          do
            echo "Deploying to instance: $instance"

            # Определяем команду
            command="docker image prune -f"
            echo "Prune Command: \"$command\""

            # Отправляем команду через SSM
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": [
                "'"${command}"'"
              ]}' \
              --region "${AWS_REGION}" \
              --query "Command.CommandId" \
              --output text)
            echo "Prune Command ID: $command_id"

            # Проверяем статус выполнения команды
            check_command_status "$command_id" "$instance"
          done
